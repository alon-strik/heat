
node_types:

  ###########################################################
  # We define a type that inherits openstack's default
  # server, and adds monitoring capabillities on top of it.
  ###########################################################

  nodes.MonitoredServer:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
      server:
        default:
          image: { get_input: image }
          flavor: { get_input: flavor }
    interfaces:

      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################

      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall

      ###########################################################
      # Adding some collectors. These collectors are necessary
      # for the Cloudify UI to display the deafult metrics.
      ###########################################################

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}


  node.Loadbalancer:
    derived_from: cloudify.nodes.ApplicationServer
    properties:
      frontend_port:
        description: The port for HAProxy to listen on.
        type: integer
        default: 8080
      statistics_port:
        description: The port HAProxy will listen on for statistics requests.
        type: integer
        default: 9000
      global_maxconn:
        description: Max number of connections at a time.
        type: integer
        default: 256
      mode:
        description: >
          The protocol that will act as a proxy for.
        type: string
        default: http
      timeout_connect:
        description: >
          Set the maximum time to wait for a connection attempt to a
          server to succeed.
        type: integer
        default: 5000
      timeout_client:
        description: Set the maximum inactivity time on the client side.
        type: integer
        default: 50000
      timeout_server:
        description: Set the maximum inactivity time on the server side.
        type: integer
        default: 50000
      default_backend:
        description: >
          The group name you choose for your backend targets.
        default: servers
      backend_app_port:
        description: >
          The port that your application listens on.
          (This is the port that you will open on your backend application servers.)
        type: integer
        default: 8080
      backend_max_conn:
        description: >
          The backend max connectons.
        default: 32
    interfaces:
      cloudify.interfaces.lifecycle:
        create: scripts/haproxy/haproxy-install.sh
        configure:
          implementation: scripts/haproxy/haproxy.py
          inputs:
            invocation:
              default:
                function: configure
        start:
          implementation: scripts/haproxy/haproxy.py
          inputs:
            invocation:
              default:
                function: start
        stop:
          implementation: scripts/haproxy/haproxy.py
          inputs:
            invocation:
              default:
                function: stop

relationships:
  app_connected_to_haproxy:
    derived_from: cloudify.relationships.connected_to
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: scripts/haproxy/haproxy.py
          inputs:
            invocation:
              default:
                function: add_backend
#                kwargs:
#                  port: { get_property: [ TARGET,  { get_property: [ nodecellar, port ] } ] }
#                  # backend_address:  (optional, defaults to host_ip)
        unlink:
          implementation: scripts/haproxy/haproxy.py
          inputs:
            invocation:
              default:
                function: remove_backend
